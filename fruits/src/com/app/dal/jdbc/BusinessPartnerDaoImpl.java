/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.jdbc;

import com.app.dal.dao.*;
import com.app.dal.factory.*;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class BusinessPartnerDaoImpl extends AbstractDAO implements BusinessPartnerDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, bp_name, bp_phone, bp_address, is_employee, is_customer, is_supplier, balance FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, bp_name, bp_phone, bp_address, is_employee, is_customer, is_supplier, balance ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, bp_name = ?, bp_phone = ?, bp_address = ?, is_employee = ?, is_customer = ?, is_supplier = ?, balance = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column bp_name
	 */
	protected static final int COLUMN_BP_NAME = 2;

	/** 
	 * Index of column bp_phone
	 */
	protected static final int COLUMN_BP_PHONE = 3;

	/** 
	 * Index of column bp_address
	 */
	protected static final int COLUMN_BP_ADDRESS = 4;

	/** 
	 * Index of column is_employee
	 */
	protected static final int COLUMN_IS_EMPLOYEE = 5;

	/** 
	 * Index of column is_customer
	 */
	protected static final int COLUMN_IS_CUSTOMER = 6;

	/** 
	 * Index of column is_supplier
	 */
	protected static final int COLUMN_IS_SUPPLIER = 7;

	/** 
	 * Index of column balance
	 */
	protected static final int COLUMN_BALANCE = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the business_partner table.
	 */
	public BusinessPartnerPk insert(BusinessPartner dto) throws BusinessPartnerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getBpName() );
			stmt.setString( index++, dto.getBpPhone() );
			stmt.setString( index++, dto.getBpAddress() );
			if (dto.isIsEmployeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsEmployee() );
			}
		
			if (dto.isIsCustomerNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsCustomer() );
			}
		
			if (dto.isIsSupplierNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsSupplier() );
			}
		
			if (dto.isBalanceNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getBalance() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessPartnerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the business_partner table.
	 */
	public void update(BusinessPartnerPk pk, BusinessPartner dto) throws BusinessPartnerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getBpName() );
			stmt.setString( index++, dto.getBpPhone() );
			stmt.setString( index++, dto.getBpAddress() );
			if (dto.isIsEmployeeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsEmployee() );
			}
		
			if (dto.isIsCustomerNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsCustomer() );
			}
		
			if (dto.isIsSupplierNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsSupplier() );
			}
		
			if (dto.isBalanceNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getBalance() );
			}
		
			stmt.setInt( 9, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessPartnerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the business_partner table.
	 */
	public void delete(BusinessPartnerPk pk) throws BusinessPartnerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessPartnerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the business_partner table that matches the specified primary-key value.
	 */
	public BusinessPartner findByPrimaryKey(BusinessPartnerPk pk) throws BusinessPartnerDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'id = :id'.
	 */
	public BusinessPartner findByPrimaryKey(int id) throws BusinessPartnerDaoException
	{
		BusinessPartner ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria ''.
	 */
	public BusinessPartner[] findAll() throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'id = :id'.
	 */
	public BusinessPartner[] findWhereIdEquals(int id) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_name = :bpName'.
	 */
	public BusinessPartner[] findWhereBpNameEquals(String bpName) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bp_name = ? ORDER BY bp_name", new Object[] { bpName } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_phone = :bpPhone'.
	 */
	public BusinessPartner[] findWhereBpPhoneEquals(String bpPhone) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bp_phone = ? ORDER BY bp_phone", new Object[] { bpPhone } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_address = :bpAddress'.
	 */
	public BusinessPartner[] findWhereBpAddressEquals(String bpAddress) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bp_address = ? ORDER BY bp_address", new Object[] { bpAddress } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_employee = :isEmployee'.
	 */
	public BusinessPartner[] findWhereIsEmployeeEquals(short isEmployee) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_employee = ? ORDER BY is_employee", new Object[] {  new Short(isEmployee) } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_customer = :isCustomer'.
	 */
	public BusinessPartner[] findWhereIsCustomerEquals(short isCustomer) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_customer = ? ORDER BY balance DESC", new Object[] {  new Short(isCustomer) } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_supplier = :isSupplier'.
	 */
	public BusinessPartner[] findWhereIsSupplierEquals(short isSupplier) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_supplier = ? ORDER BY balance DESC", new Object[] {  new Short(isSupplier) } );
	}

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'balance = :balance'.
	 */
	public BusinessPartner[] findWhereBalanceEquals(double balance) throws BusinessPartnerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE balance = ? ORDER BY balance", new Object[] {  new Double(balance) } );
	}

	/**
	 * Method 'BusinessPartnerDaoImpl'
	 * 
	 */
	public BusinessPartnerDaoImpl()
	{
	}

	/**
	 * Method 'BusinessPartnerDaoImpl'
	 * 
	 * @param userConn
	 */
	public BusinessPartnerDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "fruits.business_partner";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected BusinessPartner fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			BusinessPartner dto = new BusinessPartner();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected BusinessPartner[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			BusinessPartner dto = new BusinessPartner();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		BusinessPartner ret[] = new BusinessPartner[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(BusinessPartner dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setBpName( rs.getString( COLUMN_BP_NAME ) );
		dto.setBpPhone( rs.getString( COLUMN_BP_PHONE ) );
		dto.setBpAddress( rs.getString( COLUMN_BP_ADDRESS ) );
		dto.setIsEmployee( rs.getShort( COLUMN_IS_EMPLOYEE ) );
		if (rs.wasNull()) {
			dto.setIsEmployeeNull( true );
		}
		
		dto.setIsCustomer( rs.getShort( COLUMN_IS_CUSTOMER ) );
		if (rs.wasNull()) {
			dto.setIsCustomerNull( true );
		}
		
		dto.setIsSupplier( rs.getShort( COLUMN_IS_SUPPLIER ) );
		if (rs.wasNull()) {
			dto.setIsSupplierNull( true );
		}
		
		dto.setBalance( rs.getDouble( COLUMN_BALANCE ) );
		if (rs.wasNull()) {
			dto.setBalanceNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(BusinessPartner dto)
	{
	}

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicSelect(String sql, Object[] sqlParams) throws BusinessPartnerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessPartnerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicWhere(String sql, Object[] sqlParams) throws BusinessPartnerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessPartnerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
