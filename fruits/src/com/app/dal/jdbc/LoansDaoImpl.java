/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.jdbc;

import com.app.dal.dao.*;
import com.app.dal.factory.*;
import java.util.Date;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LoansDaoImpl extends AbstractDAO implements LoansDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT bp_id, need_to_pay, pay_date, paid, id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( bp_id, need_to_pay, pay_date, paid, id ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET bp_id = ?, need_to_pay = ?, pay_date = ?, paid = ?, id = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column bp_id
	 */
	protected static final int COLUMN_BP_ID = 1;

	/** 
	 * Index of column need_to_pay
	 */
	protected static final int COLUMN_NEED_TO_PAY = 2;

	/** 
	 * Index of column pay_date
	 */
	protected static final int COLUMN_PAY_DATE = 3;

	/** 
	 * Index of column paid
	 */
	protected static final int COLUMN_PAID = 4;

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the loans table.
	 */
	public LoansPk insert(Loans dto) throws LoansDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isBpIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBpId() );
			}
		
			if (dto.isNeedToPayNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getNeedToPay() );
			}
		
			stmt.setDate(index++, dto.getPayDate()==null ? null : new java.sql.Date( dto.getPayDate().getTime() ) );
			if (dto.isPaidNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getPaid() );
			}
		
			stmt.setInt( index++, dto.getId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LoansDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the loans table.
	 */
	public void update(LoansPk pk, Loans dto) throws LoansDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.isBpIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBpId() );
			}
		
			if (dto.isNeedToPayNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getNeedToPay() );
			}
		
			stmt.setDate(index++, dto.getPayDate()==null ? null : new java.sql.Date( dto.getPayDate().getTime() ) );
			if (dto.isPaidNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getPaid() );
			}
		
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( 6, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LoansDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the loans table.
	 */
	public void delete(LoansPk pk) throws LoansDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LoansDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the loans table that matches the specified primary-key value.
	 */
	public Loans findByPrimaryKey(LoansPk pk) throws LoansDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'id = :id'.
	 */
	public Loans findByPrimaryKey(int id) throws LoansDaoException
	{
		Loans ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'dr = :dr'.
	 */
	public Loans[] findWhereDrEquals(String dr) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dr = ? ORDER BY dr", new Object[] { dr } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'loanscol = :loanscol'.
	 */
	public Loans[] findWhereLoanscolEquals(String loanscol) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE loanscol = ? ORDER BY loanscol", new Object[] { loanscol } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria ''.
	 */
	public Loans[] findAll() throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'bp_id = :bpId'.
	 */
	public Loans[] findWhereBpIdEquals(int bpId) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bp_id = ? ORDER BY bp_id", new Object[] {  new Integer(bpId) } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'need_to_pay = :needToPay'.
	 */
	public Loans[] findWhereNeedToPayEquals(double needToPay) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE need_to_pay = ? ORDER BY need_to_pay", new Object[] {  new Double(needToPay) } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'paid = :paid'.
	 */
	public Loans[] findWherePaidEquals(double paid) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paid = ? ORDER BY paid", new Object[] {  new Double(paid) } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'pay_date = :payDate'.
	 */
	public Loans[] findWherePayDateEquals(Date payDate) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pay_date = ? ORDER BY pay_date", new Object[] { payDate==null ? null : new java.sql.Date( payDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the loans table that match the criteria 'id = :id'.
	 */
	public Loans[] findWhereIdEquals(int id) throws LoansDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/**
	 * Method 'LoansDaoImpl'
	 * 
	 */
	public LoansDaoImpl()
	{
	}

	/**
	 * Method 'LoansDaoImpl'
	 * 
	 * @param userConn
	 */
	public LoansDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "fruits.loans";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Loans fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Loans dto = new Loans();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Loans[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Loans dto = new Loans();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Loans ret[] = new Loans[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Loans dto, ResultSet rs) throws SQLException
	{
		dto.setBpId( rs.getInt( COLUMN_BP_ID ) );
		if (rs.wasNull()) {
			dto.setBpIdNull( true );
		}
		
		dto.setNeedToPay( rs.getDouble( COLUMN_NEED_TO_PAY ) );
		if (rs.wasNull()) {
			dto.setNeedToPayNull( true );
		}
		
		dto.setPayDate( rs.getDate(COLUMN_PAY_DATE ) );
		dto.setPaid( rs.getDouble( COLUMN_PAID ) );
		if (rs.wasNull()) {
			dto.setPaidNull( true );
		}
		
		dto.setId( rs.getInt( COLUMN_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Loans dto)
	{
	}

	/** 
	 * Returns all rows from the loans table that match the specified arbitrary SQL statement
	 */
	public Loans[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoansDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LoansDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the loans table that match the specified arbitrary SQL statement
	 */
	public Loans[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoansDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LoansDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
