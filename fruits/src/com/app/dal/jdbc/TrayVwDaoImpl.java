/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.jdbc;

import com.app.dal.dao.*;
import com.app.dal.factory.*;
import java.util.Date;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TrayVwDaoImpl extends AbstractDAO implements TrayVwDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT created_at, number_of_tray, name, bp_name FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column created_at
	 */
	protected static final int COLUMN_CREATED_AT = 1;

	/** 
	 * Index of column number_of_tray
	 */
	protected static final int COLUMN_NUMBER_OF_TRAY = 2;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 3;

	/** 
	 * Index of column bp_name
	 */
	protected static final int COLUMN_BP_NAME = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Returns all rows from the tray_vw table that match the criteria ''.
	 */
	public TrayVw[] findAll() throws TrayVwDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the tray_vw table that match the criteria 'created_at = :createdAt'.
	 */
	public TrayVw[] findWhereCreatedAtEquals(Date createdAt) throws TrayVwDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE created_at = ? ORDER BY created_at", new Object[] { createdAt==null ? null : new java.sql.Date( createdAt.getTime() ) } );
	}

	/** 
	 * Returns all rows from the tray_vw table that match the criteria 'number_of_tray = :numberOfTray'.
	 */
	public TrayVw[] findWhereNumberOfTrayEquals(int numberOfTray) throws TrayVwDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_of_tray = ? ORDER BY number_of_tray", new Object[] {  new Integer(numberOfTray) } );
	}

	/** 
	 * Returns all rows from the tray_vw table that match the criteria 'name = :name'.
	 */
	public TrayVw[] findWhereNameEquals(String name) throws TrayVwDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the tray_vw table that match the criteria 'bp_name = :bpName'.
	 */
	public TrayVw[] findWhereBpNameEquals(String bpName) throws TrayVwDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bp_name = ? ORDER BY bp_name", new Object[] { bpName } );
	}

	/**
	 * Method 'TrayVwDaoImpl'
	 * 
	 */
	public TrayVwDaoImpl()
	{
	}

	/**
	 * Method 'TrayVwDaoImpl'
	 * 
	 * @param userConn
	 */
	public TrayVwDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "fruits.tray_vw";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TrayVw fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TrayVw dto = new TrayVw();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TrayVw[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TrayVw dto = new TrayVw();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TrayVw ret[] = new TrayVw[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TrayVw dto, ResultSet rs) throws SQLException
	{
		dto.setCreatedAt( rs.getDate(COLUMN_CREATED_AT ) );
		dto.setNumberOfTray( rs.getInt( COLUMN_NUMBER_OF_TRAY ) );
		if (rs.wasNull()) {
			dto.setNumberOfTrayNull( true );
		}
		
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setBpName( rs.getString( COLUMN_BP_NAME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TrayVw dto)
	{
	}

	/** 
	 * Returns all rows from the tray_vw table that match the specified arbitrary SQL statement
	 */
	public TrayVw[] findByDynamicSelect(String sql, Object[] sqlParams) throws TrayVwDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrayVwDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the tray_vw table that match the specified arbitrary SQL statement
	 */
	public TrayVw[] findByDynamicWhere(String sql, Object[] sqlParams) throws TrayVwDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrayVwDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
