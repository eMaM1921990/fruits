/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface InvoiceLineDao
{
	/** 
	 * Inserts a new row in the invoice_line table.
	 */
	public InvoiceLinePk insert(InvoiceLine dto) throws InvoiceLineDaoException;

	/** 
	 * Updates a single row in the invoice_line table.
	 */
	public void update(InvoiceLinePk pk, InvoiceLine dto) throws InvoiceLineDaoException;

	/** 
	 * Deletes a single row in the invoice_line table.
	 */
	public void delete(InvoiceLinePk pk) throws InvoiceLineDaoException;

	/** 
	 * Returns the rows from the invoice_line table that matches the specified primary-key value.
	 */
	public InvoiceLine findByPrimaryKey(InvoiceLinePk pk) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'id = :id'.
	 */
	public InvoiceLine findByPrimaryKey(int id) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria ''.
	 */
	public InvoiceLine[] findAll() throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'id = :id'.
	 */
	public InvoiceLine[] findWhereIdEquals(int id) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'invoice_id = :invoiceId'.
	 */
	public InvoiceLine[] findWhereInvoiceIdEquals(int invoiceId) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'item_id = :itemId'.
	 */
	public InvoiceLine[] findWhereItemIdEquals(int itemId) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'price = :price'.
	 */
	public InvoiceLine[] findWherePriceEquals(double price) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'quantity = :quantity'.
	 */
	public InvoiceLine[] findWhereQuantityEquals(double quantity) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'total_price = :totalPrice'.
	 */
	public InvoiceLine[] findWhereTotalPriceEquals(double totalPrice) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'type = :type'.
	 */
	public InvoiceLine[] findWhereTypeEquals(String type) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the criteria 'code = :code'.
	 */
	public InvoiceLine[] findWhereCodeEquals(String code) throws InvoiceLineDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the invoice_line table that match the specified arbitrary SQL statement
	 */
	public InvoiceLine[] findByDynamicSelect(String sql, Object[] sqlParams) throws InvoiceLineDaoException;

	/** 
	 * Returns all rows from the invoice_line table that match the specified arbitrary SQL statement
	 */
	public InvoiceLine[] findByDynamicWhere(String sql, Object[] sqlParams) throws InvoiceLineDaoException;

}
