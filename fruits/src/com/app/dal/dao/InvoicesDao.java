/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import java.util.Date;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface InvoicesDao
{
	/** 
	 * Inserts a new row in the invoices table.
	 */
	public InvoicesPk insert(Invoices dto) throws InvoicesDaoException;

	/** 
	 * Updates a single row in the invoices table.
	 */
	public void update(InvoicesPk pk, Invoices dto) throws InvoicesDaoException;

	/** 
	 * Deletes a single row in the invoices table.
	 */
	public void delete(InvoicesPk pk) throws InvoicesDaoException;

	/** 
	 * Returns the rows from the invoices table that matches the specified primary-key value.
	 */
	public Invoices findByPrimaryKey(InvoicesPk pk) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'id = :id'.
	 */
	public Invoices findByPrimaryKey(int id) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria ''.
	 */
	public Invoices[] findAll() throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'emp_id = :empId'.
	 */
	public Invoices[] findByBusinessPartner(int empId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'bp_id = :bpId'.
	 */
	public Invoices[] findByBusinessPartner2(int bpId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'id = :id'.
	 */
	public Invoices[] findWhereIdEquals(int id) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'date = :date'.
	 */
	public Invoices[] findWhereDateEquals(Date date) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'grand_total = :grandTotal'.
	 */
	public Invoices[] findWhereGrandTotalEquals(String grandTotal) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'bp_id = :bpId'.
	 */
	public Invoices[] findWhereBpIdEquals(int bpId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'is_trx = :isTrx'.
	 */
	public Invoices[] findWhereIsTrxEquals(short isTrx) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'emp_id = :empId'.
	 */
	public Invoices[] findWhereEmpIdEquals(int empId) throws InvoicesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the invoices table that match the specified arbitrary SQL statement
	 */
	public Invoices[] findByDynamicSelect(String sql, Object[] sqlParams) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the specified arbitrary SQL statement
	 */
	public Invoices[] findByDynamicWhere(String sql, Object[] sqlParams) throws InvoicesDaoException;

}
