/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface BusinessPartnerDao
{
	/** 
	 * Inserts a new row in the business_partner table.
	 */
	public BusinessPartnerPk insert(BusinessPartner dto) throws BusinessPartnerDaoException;

	/** 
	 * Updates a single row in the business_partner table.
	 */
	public void update(BusinessPartnerPk pk, BusinessPartner dto) throws BusinessPartnerDaoException;

	/** 
	 * Deletes a single row in the business_partner table.
	 */
	public void delete(BusinessPartnerPk pk) throws BusinessPartnerDaoException;

	/** 
	 * Returns the rows from the business_partner table that matches the specified primary-key value.
	 */
	public BusinessPartner findByPrimaryKey(BusinessPartnerPk pk) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'id = :id'.
	 */
	public BusinessPartner findByPrimaryKey(int id) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria ''.
	 */
	public BusinessPartner[] findAll() throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'id = :id'.
	 */
	public BusinessPartner[] findWhereIdEquals(int id) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_name = :bpName'.
	 */
	public BusinessPartner[] findWhereBpNameEquals(String bpName) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_phone = :bpPhone'.
	 */
	public BusinessPartner[] findWhereBpPhoneEquals(String bpPhone) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'bp_address = :bpAddress'.
	 */
	public BusinessPartner[] findWhereBpAddressEquals(String bpAddress) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_employee = :isEmployee'.
	 */
	public BusinessPartner[] findWhereIsEmployeeEquals(short isEmployee) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_customer = :isCustomer'.
	 */
	public BusinessPartner[] findWhereIsCustomerEquals(short isCustomer) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'is_supplier = :isSupplier'.
	 */
	public BusinessPartner[] findWhereIsSupplierEquals(short isSupplier) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'balance = :balance'.
	 */
	public BusinessPartner[] findWhereBalanceEquals(double balance) throws BusinessPartnerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicSelect(String sql, Object[] sqlParams) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicWhere(String sql, Object[] sqlParams) throws BusinessPartnerDaoException;

}
