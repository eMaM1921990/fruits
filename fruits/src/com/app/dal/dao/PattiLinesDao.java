/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface PattiLinesDao
{
	/** 
	 * Inserts a new row in the patti_lines table.
	 */
	public PattiLinesPk insert(PattiLines dto) throws PattiLinesDaoException;

	/** 
	 * Updates a single row in the patti_lines table.
	 */
	public void update(PattiLinesPk pk, PattiLines dto) throws PattiLinesDaoException;

	/** 
	 * Deletes a single row in the patti_lines table.
	 */
	public void delete(PattiLinesPk pk) throws PattiLinesDaoException;

	/** 
	 * Returns the rows from the patti_lines table that matches the specified primary-key value.
	 */
	public PattiLines findByPrimaryKey(PattiLinesPk pk) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'id = :id'.
	 */
	public PattiLines findByPrimaryKey(int id) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria ''.
	 */
	public PattiLines[] findAll() throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'patti_id = :pattiId'.
	 */
	public PattiLines[] findByPatti(int pattiId) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'id = :id'.
	 */
	public PattiLines[] findWhereIdEquals(int id) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'code = :code'.
	 */
	public PattiLines[] findWhereCodeEquals(String code) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'avg_cost = :avgCost'.
	 */
	public PattiLines[] findWhereAvgCostEquals(double avgCost) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'avg_quantity = :avgQuantity'.
	 */
	public PattiLines[] findWhereAvgQuantityEquals(int avgQuantity) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'actual_cost = :actualCost'.
	 */
	public PattiLines[] findWhereActualCostEquals(double actualCost) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'actual_quantity = :actualQuantity'.
	 */
	public PattiLines[] findWhereActualQuantityEquals(int actualQuantity) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'commission_percent = :commissionPercent'.
	 */
	public PattiLines[] findWhereCommissionPercentEquals(double commissionPercent) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'loory = :loory'.
	 */
	public PattiLines[] findWhereLooryEquals(double loory) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'cooli = :cooli'.
	 */
	public PattiLines[] findWhereCooliEquals(double cooli) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the criteria 'patti_id = :pattiId'.
	 */
	public PattiLines[] findWherePattiIdEquals(int pattiId) throws PattiLinesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the patti_lines table that match the specified arbitrary SQL statement
	 */
	public PattiLines[] findByDynamicSelect(String sql, Object[] sqlParams) throws PattiLinesDaoException;

	/** 
	 * Returns all rows from the patti_lines table that match the specified arbitrary SQL statement
	 */
	public PattiLines[] findByDynamicWhere(String sql, Object[] sqlParams) throws PattiLinesDaoException;

}
