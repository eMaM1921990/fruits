/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import java.util.Date;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface SalaryDao
{
	/** 
	 * Inserts a new row in the salary table.
	 */
	public SalaryPk insert(Salary dto) throws SalaryDaoException;

	/** 
	 * Updates a single row in the salary table.
	 */
	public void update(SalaryPk pk, Salary dto) throws SalaryDaoException;

	/** 
	 * Deletes a single row in the salary table.
	 */
	public void delete(SalaryPk pk) throws SalaryDaoException;

	/** 
	 * Returns the rows from the salary table that matches the specified primary-key value.
	 */
	public Salary findByPrimaryKey(SalaryPk pk) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria 'id = :id'.
	 */
	public Salary findByPrimaryKey(int id) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria ''.
	 */
	public Salary[] findAll() throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria 'id = :id'.
	 */
	public Salary[] findWhereIdEquals(int id) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria 'date = :date'.
	 */
	public Salary[] findWhereDateEquals(Date date) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria 'bp_id = :bpId'.
	 */
	public Salary[] findWhereBpIdEquals(int bpId) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the criteria 'amount = :amount'.
	 */
	public Salary[] findWhereAmountEquals(double amount) throws SalaryDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the salary table that match the specified arbitrary SQL statement
	 */
	public Salary[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryDaoException;

	/** 
	 * Returns all rows from the salary table that match the specified arbitrary SQL statement
	 */
	public Salary[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryDaoException;

}
