/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface StockDao
{
	/** 
	 * Inserts a new row in the stock table.
	 */
	public StockPk insert(Stock dto) throws StockDaoException;

	/** 
	 * Updates a single row in the stock table.
	 */
	public void update(StockPk pk, Stock dto) throws StockDaoException;

	/** 
	 * Deletes a single row in the stock table.
	 */
	public void delete(StockPk pk) throws StockDaoException;

	/** 
	 * Returns the rows from the stock table that matches the specified primary-key value.
	 */
	public Stock findByPrimaryKey(StockPk pk) throws StockDaoException;

	/** 
	 * Returns all rows from the stock table that match the criteria 'id = :id'.
	 */
	public Stock findByPrimaryKey(int id) throws StockDaoException;

	/** 
	 * Returns all rows from the stock table that match the criteria ''.
	 */
	public Stock[] findAll() throws StockDaoException;

	/** 
	 * Returns all rows from the stock table that match the criteria 'id = :id'.
	 */
	public Stock[] findWhereIdEquals(int id) throws StockDaoException;

	/** 
	 * Returns all rows from the stock table that match the criteria 'stock_name = :stockName'.
	 */
	public Stock[] findWhereStockNameEquals(String stockName) throws StockDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the stock table that match the specified arbitrary SQL statement
	 */
	public Stock[] findByDynamicSelect(String sql, Object[] sqlParams) throws StockDaoException;

	/** 
	 * Returns all rows from the stock table that match the specified arbitrary SQL statement
	 */
	public Stock[] findByDynamicWhere(String sql, Object[] sqlParams) throws StockDaoException;

}
