/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.app.dal.dao;

import java.util.Date;
import com.app.dal.dto.*;
import com.app.dal.exceptions.*;

public interface TrayDao
{
	/** 
	 * Inserts a new row in the tray table.
	 */
	public TrayPk insert(Tray dto) throws TrayDaoException;

	/** 
	 * Updates a single row in the tray table.
	 */
	public void update(TrayPk pk, Tray dto) throws TrayDaoException;

	/** 
	 * Deletes a single row in the tray table.
	 */
	public void delete(TrayPk pk) throws TrayDaoException;

	/** 
	 * Returns the rows from the tray table that matches the specified primary-key value.
	 */
	public Tray findByPrimaryKey(TrayPk pk) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'id = :id'.
	 */
	public Tray findByPrimaryKey(int id) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria ''.
	 */
	public Tray[] findAll() throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'id = :id'.
	 */
	public Tray[] findWhereIdEquals(int id) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'created_at = :createdAt'.
	 */
	public Tray[] findWhereCreatedAtEquals(Date createdAt) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'bp_id = :bpId'.
	 */
	public Tray[] findWhereBpIdEquals(int bpId) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'number_of_tray = :numberOfTray'.
	 */
	public Tray[] findWhereNumberOfTrayEquals(int numberOfTray) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the criteria 'name = :name'.
	 */
	public Tray[] findWhereNameEquals(String name) throws TrayDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the tray table that match the specified arbitrary SQL statement
	 */
	public Tray[] findByDynamicSelect(String sql, Object[] sqlParams) throws TrayDaoException;

	/** 
	 * Returns all rows from the tray table that match the specified arbitrary SQL statement
	 */
	public Tray[] findByDynamicWhere(String sql, Object[] sqlParams) throws TrayDaoException;

}
